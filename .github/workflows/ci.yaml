name: CI

# This action runs through ImageIO's continous integration pipeline. It
# performs the following checks:
# 
# - Linting/Style (Black)
# - Invokes the unit tests in no-internet mode on python 3.8
# - runs unit test on cypthon in matrix mode (python 3.X) x (3 major OS)
# - runs unit tests on pypy in matrix mode (pypy 3.X) x (3 major OS)


on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


jobs:
  style:
    name: "Linting"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: psf/black@20.8b1
        with:
          args: ". --check"
      - name: Install Dependencies
        shell: bash
        run: |
            pip install black flake8
      - name: Flake8
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: flake8
          run: flake8 .

  # cpython:
  #   name: "${{ matrix.os }} / CPython ${{ matrix.pyversion }}"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       os: ["ubuntu-latest", "macos-latest", "windows-latest"]
  #       pyversion: ["3.7", "3.8", "3.9", "3.10"]
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 2
  #     - name: Set up Python ${{ matrix.pyversion }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.pyversion }}
  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         virtualenvs-create: True
  #         virtualenvs-in-project: True
  #     - name: Install Project
  #       shell: bash
  #       run: |
  #         poetry install --no-interaction -v
  #     - name: Run Tests
  #       run: |
  #         source $VENV
  #         pytest -v --github-username "anything" --github-token ${{ secrets.GITHUB_TOKEN }}

  # pypy:
  #   name: "${{ matrix.os }} / ${{ matrix.pyversion }}"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       os: ["ubuntu-latest", "macos-latest"]
  #       pyversion: ["pypy-3.7", "pypy-3.8", "pypy-3.9"]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up pypy
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: "${{ matrix.pyversion }}"
  #     - name: Install Poetry & Project
  #       shell: bash
  #       run: |
  #         pypy3 -m pip install poetry
  #         pypy3 -m poetry config virtualenvs.in-project true
  #         pypy3 -m poetry install --no-interaction -v
  #     - name: Run Unit tests
  #       run: |
  #         pypy3 -m poetry run pytest -v --github-username "anything" --github-token ${{ secrets.GITHUB_TOKEN }}

  wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-11]

    steps:
      - uses: actions/checkout@v3

      # Used to host cibuildwheel
      - uses: actions/setup-python@v3

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.8.1

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_SKIP: "cp36-*"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: ""
          # CIBW_BUILD_VERBOSITY: 3
        # to supply options, put them in 'env', like:
        # env:
        #   CIBW_SOME_OPTION: value

      - uses: actions/upload-artifact@v3
        with:
          name: wheelhouse
          path: ./wheelhouse/*.whl
